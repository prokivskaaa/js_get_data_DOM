{"version":3,"sources":["scripts/main.js"],"names":["populations","document","querySelectorAll","textData","map","item","innerText","numsWithoutCommas","country","currentCountry","split","push","filter","join","textDataToNumber","Number","totalPopulationNumber","reduce","acc","toString","replace","averagePopulationNumber","length","total","querySelector","avarage"],"mappings":";AAAA,aAkCA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAhCA,IAgCA,EAhCMA,EAAcC,SAASC,iBAAiB,mBACxCC,EAAW,EAAIH,GAAaI,IAAI,SAAAC,GAAQA,OAAAA,EAAKC,YAC7CC,EAAoB,GAEJJ,EAAAA,EAAAA,GA4BtB,IA5BgC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAArBK,IAAAA,EAAqB,EAAA,MACxBC,EAAiBD,EAAQE,MAAM,IAErCH,EAAkBI,KAAKF,EACpBG,OAAO,SAAAP,GAAQA,MAAS,MAATA,IACfQ,KAAK,MAuBV,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAnBA,IAAMC,EAAmBP,EAAkBH,IAAI,SAAAC,GAAQU,OAAAA,OAAOV,KAExDW,EAAwBF,EAC3BG,OAAO,SAACC,EAAKb,GAASa,OAAAA,EAAMb,GAAM,GAClCc,WACAC,QAAQ,wBAAyB,KAE9BC,GAA2BP,EAC9BG,OAAO,SAACC,EAAKb,GAASa,OAAAA,EAAMb,GAAM,GACjCS,EAAiBQ,QAClBH,WACAC,QAAQ,wBAAyB,KAE9BG,EAAQtB,SAASuB,cAAc,yBAErCD,EAAMjB,UAAYU,EAElB,IAAMS,EAAUxB,SAASuB,cAAc,2BAEvCC,EAAQnB,UAAYe","file":"main.53d1d364.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst populations = document.querySelectorAll('span.population');\nconst textData = [...populations].map(item => item.innerText);\nconst numsWithoutCommas = [];\n\nfor (const country of textData) {\n  const currentCountry = country.split('');\n\n  numsWithoutCommas.push(currentCountry\n    .filter(item => item !== ',')\n    .join('')\n  );\n}\n\nconst textDataToNumber = numsWithoutCommas.map(item => Number(item));\n\nconst totalPopulationNumber = textDataToNumber\n  .reduce((acc, item) => acc + item, 0)\n  .toString()\n  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nconst averagePopulationNumber = (textDataToNumber\n  .reduce((acc, item) => acc + item, 0)\n  / textDataToNumber.length)\n  .toString()\n  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nconst total = document.querySelector('span.total-population');\n\ntotal.innerText = totalPopulationNumber;\n\nconst avarage = document.querySelector('span.average-population');\n\navarage.innerText = averagePopulationNumber;\n"]}